#!/usr/bin/env python3
"""
Script de inicio r√°pido para el Sistema de Gesti√≥n de Ejercicios
Se√±ales y Sistemas - PUC Chile

Este script:
1. Verifica dependencias
2. Inicializa la base de datos
3. Carga datos de ejemplo
4. Lanza la aplicaci√≥n
"""

import os
import sys
import subprocess
import sqlite3
from pathlib import Path

def check_python_version():
    """Verifica que Python sea 3.8+"""
    if sys.version_info < (3, 8):
        print("‚ùå Error: Python 3.8 o superior requerido")
        print(f"Versi√≥n actual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def check_latex():
    """Verifica que LaTeX est√© instalado"""
    try:
        result = subprocess.run(['pdflatex', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ LaTeX encontrado")
            return True
    except FileNotFoundError:
        pass
    
    print("‚ö†Ô∏è  LaTeX no encontrado - La generaci√≥n de PDFs no funcionar√°")
    print("   Instala LaTeX para usar todas las funcionalidades:")
    print("   - Windows: MiKTeX o TeX Live")
    print("   - macOS: MacTeX") 
    print("   - Linux: sudo apt-get install texlive-full")
    return False

def check_conda():
    """Verifica si conda est√° disponible"""
    try:
        result = subprocess.run(['conda', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Conda encontrado: {result.stdout.strip()}")
            return True
    except FileNotFoundError:
        pass
    
    print("‚ÑπÔ∏è  Conda no encontrado - usando pip")
    return False

def setup_conda_environment():
    """Configura el entorno conda"""
    print("üêç Configurando entorno conda...")
    
    env_file = Path("environment.yml")
    if not env_file.exists():
        print("‚ùå Archivo environment.yml no encontrado")
        return False
    
    try:
        # Crear entorno conda
        print("   Creando entorno 'ejercicios-sys'...")
        subprocess.run(['conda', 'env', 'create', '-f', 'environment.yml'], 
                      check=True)
        
        print("‚úÖ Entorno conda creado correctamente")
        print("üí° Para activar el entorno ejecuta:")
        print("   conda activate ejercicios-sys")
        return True
        
    except subprocess.CalledProcessError as e:
        if "already exists" in str(e):
            print("‚ÑπÔ∏è  El entorno 'ejercicios-sys' ya existe")
            update_choice = input("¬øActualizar entorno existente? (y/N): ").lower()
            if update_choice in ['y', 'yes', 's', 'si']:
                try:
                    subprocess.run(['conda', 'env', 'update', '-f', 'environment.yml'], 
                                  check=True)
                    print("‚úÖ Entorno actualizado")
                    return True
                except subprocess.CalledProcessError:
                    print("‚ùå Error actualizando entorno")
                    return False
            return True
        else:
            print(f"‚ùå Error creando entorno conda: {e}")
            return False

def install_dependencies():
    """Instala las dependencias seg√∫n el gestor disponible"""
    print("üì¶ Configurando dependencias...")
    
    # Verificar si conda est√° disponible
    has_conda = check_conda()
    
    if has_conda:
        use_conda = input("¬øUsar conda para gestionar dependencias? (Y/n): ").lower()
        if use_conda not in ['n', 'no']:
            return setup_conda_environment()
    
    # Fallback a pip
    print("üì¶ Instalando dependencias con pip...")
    
    requirements_file = Path("requirements.txt")
    if not requirements_file.exists():
        print("‚ùå Archivo requirements.txt no encontrado")
        return False
    
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], 
                      check=True)
        print("‚úÖ Dependencias instaladas correctamente")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Error instalando dependencias")
        return False

def create_directories():
    """Crea los directorios necesarios"""
    directories = [
        'database',
        'output', 
        'templates',
        'static/images'
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
    
    print("‚úÖ Directorios creados")

def initialize_database():
    """Inicializa la base de datos con datos de ejemplo"""
    print("üóÑÔ∏è  Inicializando base de datos...")
    
    # Importar despu√©s de instalar dependencias
    try:
        # Simular la importaci√≥n del database manager
        # En implementaci√≥n real: from database.db_manager import DatabaseManager
        
        db_path = "database/ejercicios.db"
        
        # Crear base de datos simple para demo
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Crear tabla b√°sica
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS ejercicios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            titulo TEXT NOT NULL,
            unidad_tematica TEXT,
            nivel_dificultad TEXT,
            enunciado TEXT,
            fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # Insertar ejercicios de ejemplo
        ejercicios_ejemplo = [
            ("Convoluci√≥n de se√±ales rectangulares", "Sistemas Continuos", "B√°sico", 
             "Calcule la convoluci√≥n y(t) = x(t) * h(t) donde x(t) y h(t) son se√±ales rectangulares."),
            ("FFT de se√±al con ruido", "Transformada de Fourier Discreta", "Intermedio",
             "Implemente en Python el c√°lculo de la FFT de una se√±al sinusoidal con ruido."),
            ("An√°lisis de estabilidad", "Transformada Z", "Avanzado",
             "Analice la estabilidad del sistema usando la transformada Z.")
        ]
        
        cursor.executemany("""
        INSERT INTO ejercicios (titulo, unidad_tematica, nivel_dificultad, enunciado)
        VALUES (?, ?, ?, ?)
        """, ejercicios_ejemplo)
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Base de datos inicializada con ejercicios de ejemplo")
        return True
        
    except Exception as e:
        print(f"‚ùå Error inicializando base de datos: {e}")
        return False

def create_sample_config():
    """Crea archivos de configuraci√≥n de ejemplo"""
    config_content = """# Configuraci√≥n del Sistema de Gesti√≥n de Ejercicios

# Informaci√≥n del curso
COURSE_NAME = "IEE2103 - Se√±ales y Sistemas"
PROFESSOR_NAME = "Patricio de la Cuadra"
UNIVERSITY = "Pontificia Universidad Cat√≥lica de Chile"
SEMESTER = "2024-2"

# Configuraci√≥n de base de datos
DATABASE_PATH = "database/ejercicios.db"

# Configuraci√≥n de exportaci√≥n
OUTPUT_DIR = "output"
LATEX_TEMPLATE = "templates/prueba_template.tex"

# Configuraci√≥n de aplicaci√≥n
DEBUG = True
PORT = 8501
"""
    
    with open("config.py", "w") as f:
        f.write(config_content)
    
    print("‚úÖ Archivo de configuraci√≥n creado")

def launch_application():
    """Lanza la aplicaci√≥n Streamlit"""
    print("üöÄ Lanzando aplicaci√≥n...")
    
    # Verificar si estamos en entorno conda
    if 'CONDA_DEFAULT_ENV' in os.environ:
        env_name = os.environ['CONDA_DEFAULT_ENV']
        if env_name != 'ejercicios-sys':
            print(f"‚ö†Ô∏è  Advertencia: Entorno actual '{env_name}' no es 'ejercicios-sys'")
            print("   Para usar el entorno correcto:")
            print("   conda activate ejercicios-sys")
            print("   streamlit run app.py")
            return
        else:
            print(f"‚úÖ Usando entorno conda: {env_name}")
    
    print("   La aplicaci√≥n se abrir√° en http://localhost:8501")
    print("   Presiona Ctrl+C para detener la aplicaci√≥n")
    
    try:
        subprocess.run([sys.executable, '-m', 'streamlit', 'run', 'app.py'])
    except KeyboardInterrupt:
        print("\nüëã Aplicaci√≥n detenida")
    except FileNotFoundError:
        print("‚ùå Error: app.py no encontrado")
        print("   Aseg√∫rate de estar en el directorio correcto")

def main():
    """Funci√≥n principal del script de inicio"""
    print("=" * 60)
    print("üéì Sistema de Gesti√≥n de Ejercicios - Se√±ales y Sistemas")
    print("   Pontificia Universidad Cat√≥lica de Chile")
    print("=" * 60)
    print()
    
    # Verificaciones del sistema
    if not check_python_version():
        return
    
    check_latex()
    print()
    
    # Configuraci√≥n inicial
    print("üîß Configuraci√≥n inicial...")
    create_directories()
    create_sample_config()
    
    # Instalar dependencias
    install_choice = input("¬øInstalar dependencias de Python? (y/N): ").lower()
    if install_choice in ['y', 'yes', 's', 'si']:
        if not install_dependencies():
            return
    
    # Inicializar base de datos
    db_choice = input("¬øInicializar base de datos con ejemplos? (Y/n): ").lower()
    if db_choice not in ['n', 'no']:
        if not initialize_database():
            return
    
    print()
    print("‚úÖ ¬°Configuraci√≥n completada!")
    print()
    
    # Lanzar aplicaci√≥n
    launch_choice = input("¬øLanzar aplicaci√≥n ahora? (Y/n): ").lower()
    if launch_choice not in ['n', 'no']:
        launch_application()
    else:
        print("üí° Para lanzar la aplicaci√≥n m√°s tarde, ejecuta:")
        print("   streamlit run app.py")

if __name__ == "__main__":
    main()