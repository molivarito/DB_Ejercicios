"""
Sistema de Gesti√≥n de Ejercicios - Se√±ales y Sistemas
Aplicaci√≥n principal con Streamlit
Patricio de la Cuadra - PUC Chile
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date
import json
import os
from typing import List, Dict

# Importar el gestor de base de datos
# from database.db_manager import DatabaseManager

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Gesti√≥n Ejercicios SyS",
    page_icon="üìö",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f4e79;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f8ff;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f4e79;
    }
    .exercise-card {
        border: 1px solid #ddd;
        border-radius: 0.5rem;
        padding: 1rem;
        margin: 0.5rem 0;
        background-color: #f9f9f9;
    }
    .difficulty-basic { color: #28a745; }
    .difficulty-intermedio { color: #ffc107; }
    .difficulty-avanzado { color: #fd7e14; }
    .difficulty-desafio { color: #dc3545; }
</style>
""", unsafe_allow_html=True)

# Inicializar la base de datos (simulada para el prototipo)
@st.cache_resource
def init_database():
    """Inicializa la conexi√≥n a la base de datos"""
    # Aqu√≠ ir√≠a: return DatabaseManager()
    return "Database connection placeholder"

@st.cache_data
def load_sample_data():
    """Carga datos de ejemplo para el prototipo"""
    return [
        {
            'id': 1,
            'titulo': 'Convoluci√≥n de se√±ales rectangulares',
            'unidad_tematica': 'Sistemas Continuos',
            'nivel_dificultad': 'B√°sico',
            'tiempo_estimado': 15,
            'modalidad': 'Te√≥rico',
            'enunciado': 'Calcule la convoluci√≥n de dos se√±ales rectangulares...',
            'estado': 'Listo',
            'fecha_creacion': '2024-01-15'
        },
        {
            'id': 2,
            'titulo': 'FFT de se√±al sinusoidal con ruido',
            'unidad_tematica': 'Transformada de Fourier Discreta',
            'nivel_dificultad': 'Intermedio',
            'tiempo_estimado': 25,
            'modalidad': 'Computacional',
            'enunciado': 'Implemente en Python el c√°lculo de la FFT...',
            'estado': 'Listo',
            'fecha_creacion': '2024-01-20'
        },
        {
            'id': 3,
            'titulo': 'An√°lisis de estabilidad con transformada Z',
            'unidad_tematica': 'Transformada Z',
            'nivel_dificultad': 'Avanzado',
            'tiempo_estimado': 35,
            'modalidad': 'Mixto',
            'enunciado': 'Analice la estabilidad del sistema dado usando...',
            'estado': 'En revisi√≥n',
            'fecha_creacion': '2024-01-25'
        }
    ]

# Funciones auxiliares
def get_difficulty_color(difficulty):
    """Retorna la clase CSS para el color de dificultad"""
    colors = {
        'B√°sico': 'difficulty-basic',
        'Intermedio': 'difficulty-intermedio', 
        'Avanzado': 'difficulty-avanzado',
        'Desaf√≠o': 'difficulty-desafio'
    }
    return colors.get(difficulty, '')

def show_exercise_card(exercise):
    """Muestra una tarjeta de ejercicio"""
    with st.container():
        col1, col2, col3 = st.columns([3, 1, 1])
        
        with col1:
            st.markdown(f"**{exercise['titulo']}**")
            st.caption(f"ID: {exercise['id']} | {exercise['unidad_tematica']}")
            
        with col2:
            difficulty_class = get_difficulty_color(exercise['nivel_dificultad'])
            st.markdown(f"<span class='{difficulty_class}'>{exercise['nivel_dificultad']}</span>", 
                       unsafe_allow_html=True)
            st.caption(f"{exercise['tiempo_estimado']} min")
            
        with col3:
            st.caption(f"Modalidad: {exercise['modalidad']}")
            st.caption(f"Estado: {exercise['estado']}")

# Sidebar para navegaci√≥n
def setup_sidebar():
    """Configura el sidebar de navegaci√≥n"""
    st.sidebar.markdown("## üìö Gesti√≥n de Ejercicios")
    st.sidebar.markdown("**Se√±ales y Sistemas**")
    st.sidebar.markdown("---")
    
    menu_options = [
        "üè† Dashboard",
        "‚ûï Agregar Ejercicio", 
        "üîç Buscar Ejercicios",
        "üéØ Generar Prueba",
        "üìä Estad√≠sticas",
        "‚öôÔ∏è Configuraci√≥n"
    ]
    
    return st.sidebar.selectbox("Navegaci√≥n", menu_options)

# P√°ginas principales
def show_dashboard():
    """P√°gina principal - Dashboard"""
    st.markdown('<h1 class="main-header">üìö Dashboard - Ejercicios SyS</h1>', 
                unsafe_allow_html=True)
    
    # M√©tricas principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Ejercicios", "3", "‚ÜóÔ∏è +1")
    with col2:
        st.metric("Listos para usar", "2", "")
    with col3:
        st.metric("En revisi√≥n", "1", "")
    with col4:
        st.metric("√öltimo agregado", "3 d√≠as", "")
    
    # Distribuci√≥n por unidad tem√°tica
    st.subheader("üìà Distribuci√≥n por Unidad Tem√°tica")
    
    # Datos de ejemplo para el gr√°fico
    unidades_data = pd.DataFrame({
        'Unidad': ['Sistemas Continuos', 'DFT', 'Transformada Z'],
        'Cantidad': [1, 1, 1]
    })
    
    st.bar_chart(unidades_data.set_index('Unidad'))
    
    # Ejercicios recientes
    st.subheader("üïí Ejercicios Agregados Recientemente")
    
    sample_data = load_sample_data()
    for exercise in sample_data:
        show_exercise_card(exercise)

def show_add_exercise():
    """P√°gina para agregar nuevo ejercicio"""
    st.markdown('<h1 class="main-header">‚ûï Agregar Nuevo Ejercicio</h1>', 
                unsafe_allow_html=True)
    
    with st.form("nuevo_ejercicio"):
        # Informaci√≥n b√°sica
        st.subheader("üìù Informaci√≥n B√°sica")
        col1, col2 = st.columns(2)
        
        with col1:
            titulo = st.text_input("T√≠tulo del Ejercicio*", placeholder="Ej: Convoluci√≥n de se√±ales...")
            fuente = st.text_input("Fuente", placeholder="Ej: Libro Pablo Alvarado, Creaci√≥n propia")
            
        with col2:
            a√±o_creacion = st.number_input("A√±o de Creaci√≥n", min_value=2020, max_value=2030, value=2024)
            palabras_clave = st.text_input("Palabras Clave", placeholder="Separadas por comas")
        
        # Clasificaci√≥n tem√°tica
        st.subheader("üìö Clasificaci√≥n Tem√°tica")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            unidades = ["Introducci√≥n", "Sistemas Continuos", "Transformada de Fourier", 
                       "Transformada de Laplace", "Sistemas Discretos", 
                       "Transformada de Fourier Discreta", "Transformada Z"]
            unidad_tematica = st.selectbox("Unidad Tem√°tica*", unidades)
            
        with col2:
            dificultades = ["B√°sico", "Intermedio", "Avanzado", "Desaf√≠o"]
            nivel_dificultad = st.selectbox("Nivel de Dificultad*", dificultades)
            
        with col3:
            modalidades = ["Te√≥rico", "Computacional", "Mixto"]
            modalidad = st.selectbox("Modalidad*", modalidades)
        
        subtemas = st.text_input("Subtemas", placeholder="Ej: Convoluci√≥n, Linealidad (separados por comas)")
        tiempo_estimado = st.number_input("Tiempo Estimado (minutos)", min_value=5, max_value=120, value=15)
        
        # Uso pedag√≥gico
        st.subheader("üéØ Uso Pedag√≥gico")
        tipos_actividad = st.multiselect(
            "Tipos de Actividad",
            ["Prueba/Interrogaci√≥n", "Tarea", "Ayudant√≠a", "Clase", "Control", "Examen", "Quiz"]
        )
        
        objetivos_curso = st.multiselect(
            "Objetivos del Curso que aborda",
            ["1. Reconocer y clasificar se√±ales/sistemas", 
             "2. Aplicar convoluci√≥n e impulso",
             "3. Muestreo y reconstrucci√≥n", 
             "4. An√°lisis en frecuencia",
             "5. Transformadas matem√°ticas", 
             "6. Funciones de transferencia"]
        )
        
        # Contenido
        st.subheader("üìÑ Contenido")
        enunciado = st.text_area("Enunciado del Ejercicio*", height=150)
        datos_entrada = st.text_area("Datos de Entrada", height=100)
        
        col1, col2 = st.columns(2)
        with col1:
            solucion_completa = st.text_area("Soluci√≥n Completa", height=200)
        with col2:
            respuesta_final = st.text_area("Respuesta Final", height=100)
            codigo_python = st.text_area("C√≥digo Python (si aplica)", height=100)
        
        # Metadatos adicionales
        st.subheader("üîß Informaci√≥n Adicional")
        col1, col2 = st.columns(2)
        
        with col1:
            prerrequisitos = st.text_area("Prerrequisitos")
            comentarios_docente = st.text_area("Comentarios del Docente")
            
        with col2:
            errores_comunes = st.text_area("Errores Comunes de Estudiantes")
            hints = st.text_area("Pistas/Hints")
        
        # Bot√≥n de env√≠o
        submitted = st.form_submit_button("üíæ Guardar Ejercicio", type="primary")
        
        if submitted:
            if titulo and unidad_tematica and enunciado:
                # Aqu√≠ ir√≠a la l√≥gica para guardar en la base de datos
                st.success("‚úÖ Ejercicio guardado exitosamente!")
                st.balloons()
                
                # Mostrar resumen
                with st.expander("üìã Resumen del ejercicio creado"):
                    st.write(f"**T√≠tulo:** {titulo}")
                    st.write(f"**Unidad:** {unidad_tematica}")
                    st.write(f"**Dificultad:** {nivel_dificultad}")
                    st.write(f"**Modalidad:** {modalidad}")
                    st.write(f"**Tiempo estimado:** {tiempo_estimado} minutos")
            else:
                st.error("‚ùå Por favor completa los campos obligatorios (marcados con *)")

def show_search_exercises():
    """P√°gina para buscar y filtrar ejercicios"""
    st.markdown('<h1 class="main-header">üîç Buscar Ejercicios</h1>', 
                unsafe_allow_html=True)
    
    # Filtros
    with st.expander("üîß Filtros de B√∫squeda", expanded=True):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            unidades = ["Todas"] + ["Introducci√≥n", "Sistemas Continuos", "Transformada de Fourier", 
                                   "Transformada de Laplace", "Sistemas Discretos", 
                                   "Transformada de Fourier Discreta", "Transformada Z"]
            filtro_unidad = st.selectbox("Unidad Tem√°tica", unidades)
            
        with col2:
            dificultades = ["Todas", "B√°sico", "Intermedio", "Avanzado", "Desaf√≠o"]
            filtro_dificultad = st.selectbox("Dificultad", dificultades)
            
        with col3:
            modalidades = ["Todas", "Te√≥rico", "Computacional", "Mixto"]
            filtro_modalidad = st.selectbox("Modalidad", modalidades)
        
        # B√∫squeda por texto
        busqueda_texto = st.text_input("üîç Buscar por t√≠tulo o contenido")
    
    # Mostrar resultados
    st.subheader("üìã Resultados de la B√∫squeda")
    
    sample_data = load_sample_data()
    
    # Aplicar filtros (simulado)
    ejercicios_filtrados = sample_data
    
    if filtro_unidad != "Todas":
        ejercicios_filtrados = [e for e in ejercicios_filtrados if e['unidad_tematica'] == filtro_unidad]
    
    if filtro_dificultad != "Todas":
        ejercicios_filtrados = [e for e in ejercicios_filtrados if e['nivel_dificultad'] == filtro_dificultad]
    
    if filtro_modalidad != "Todas":
        ejercicios_filtrados = [e for e in ejercicios_filtrados if e['modalidad'] == filtro_modalidad]
    
    # Mostrar ejercicios
    if ejercicios_filtrados:
        st.write(f"**Encontrados:** {len(ejercicios_filtrados)} ejercicios")
        
        for exercise in ejercicios_filtrados:
            with st.container():
                show_exercise_card(exercise)
                
                col1, col2, col3 = st.columns([1, 1, 4])
                with col1:
                    if st.button("üëÅÔ∏è Ver", key=f"ver_{exercise['id']}"):
                        st.session_state[f"show_detail_{exercise['id']}"] = True
                        
                with col2:
                    if st.button("‚úèÔ∏è Editar", key=f"edit_{exercise['id']}"):
                        st.info("Funci√≥n de edici√≥n en desarrollo")
                
                # Mostrar detalles si se solicita
                if st.session_state.get(f"show_detail_{exercise['id']}", False):
                    with st.expander(f"üìÑ Detalles - {exercise['titulo']}", expanded=True):
                        st.write(f"**Enunciado:** {exercise['enunciado']}")
                        st.write(f"**ID:** {exercise['id']}")
                        st.write(f"**Fecha de creaci√≥n:** {exercise['fecha_creacion']}")
                        
                        if st.button("‚ùå Cerrar", key=f"close_{exercise['id']}"):
                            st.session_state[f"show_detail_{exercise['id']}"] = False
                            st.experimental_rerun()
                
                st.divider()
    else:
        st.warning("No se encontraron ejercicios con los filtros seleccionados")

def show_generate_test():
    """P√°gina para generar pruebas"""
    st.markdown('<h1 class="main-header">üéØ Generador de Pruebas</h1>', 
                unsafe_allow_html=True)
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.subheader("‚öôÔ∏è Configuraci√≥n de la Prueba")
        
        # Informaci√≥n general
        nombre_prueba = st.text_input("Nombre de la Prueba", "Interrogaci√≥n 1 - SyS")
        semestre = st.text_input("Semestre", "2024-2")
        fecha_prueba = st.date_input("Fecha de la Prueba", datetime.now().date())
        
        # Criterios de selecci√≥n
        st.subheader("üé≤ Criterios de Selecci√≥n")
        
        unidades_incluir = st.multiselect(
            "Unidades Tem√°ticas a Incluir",
            ["Introducci√≥n", "Sistemas Continuos", "Transformada de Fourier", 
             "Transformada de Laplace", "Sistemas Discretos", 
             "Transformada de Fourier Discreta", "Transformada Z"],
            default=["Sistemas Continuos", "Transformada de Fourier"]
        )
        
        num_ejercicios = st.number_input("N√∫mero de Ejercicios", min_value=1, max_value=20, value=4)
        
        distribucion_dificultad = st.selectbox(
            "Distribuci√≥n de Dificultad",
            ["Autom√°tica (balanceada)", "Principalmente B√°sico", "Principalmente Intermedio", 
             "Principalmente Avanzado", "Solo B√°sico", "Solo Intermedio", "Solo Avanzado"]
        )
        
        tiempo_total = st.number_input("Tiempo Total (minutos)", min_value=30, max_value=180, value=90)
        
        modalidad_prueba = st.multiselect(
            "Modalidades Permitidas",
            ["Te√≥rico", "Computacional", "Mixto"],
            default=["Te√≥rico", "Mixto"]
        )
        
        incluir_soluciones = st.checkbox("Incluir soluciones en PDF separado", value=True)
        
        # Bot√≥n para generar
        if st.button("üéØ Generar Prueba", type="primary"):
            with st.spinner("Generando prueba..."):
                # Aqu√≠ ir√≠a la l√≥gica de generaci√≥n
                st.success("‚úÖ Prueba generada exitosamente!")
                
                # Simular ejercicios seleccionados
                sample_data = load_sample_data()
                ejercicios_seleccionados = sample_data[:min(num_ejercicios, len(sample_data))]
                
                st.session_state['ejercicios_seleccionados'] = ejercicios_seleccionados
                st.session_state['config_prueba'] = {
                    'nombre': nombre_prueba,
                    'semestre': semestre,
                    'fecha': fecha_prueba,
                    'tiempo_total': tiempo_total
                }
    
    with col2:
        st.subheader("üìã Vista Previa de la Prueba")
        
        if 'ejercicios_seleccionados' in st.session_state:
            config = st.session_state['config_prueba']
            ejercicios = st.session_state['ejercicios_seleccionados']
            
            # Encabezado de la prueba
            st.markdown(f"""
            **{config['nombre']}**  
            **Semestre:** {config['semestre']}  
            **Fecha:** {config['fecha']}  
            **Tiempo:** {config['tiempo_total']} minutos  
            **Total Ejercicios:** {len(ejercicios)}
            """)
            
            st.divider()
            
            # Lista de ejercicios
            for i, ejercicio in enumerate(ejercicios, 1):
                with st.container():
                    st.markdown(f"**Ejercicio {i}:** {ejercicio['titulo']}")
                    st.caption(f"Dificultad: {ejercicio['nivel_dificultad']} | "
                             f"Tiempo estimado: {ejercicio['tiempo_estimado']} min")
                    
                    with st.expander(f"Ver enunciado del ejercicio {i}"):
                        st.write(ejercicio['enunciado'])
                    
                    st.divider()
            
            # Botones de exportaci√≥n
            st.subheader("üì§ Exportar Prueba")
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("üìÑ Generar PDF", key="generate_pdf"):
                    st.info("Generaci√≥n de PDF en desarrollo...")
                    
            with col2:
                if st.button("üìù Generar LaTeX", key="generate_latex"):
                    st.info("Generaci√≥n de LaTeX en desarrollo...")
        else:
            st.info("üëÜ Configura los par√°metros y presiona 'Generar Prueba' para ver la vista previa")

def show_statistics():
    """P√°gina de estad√≠sticas"""
    st.markdown('<h1 class="main-header">üìä Estad√≠sticas</h1>', 
                unsafe_allow_html=True)
    
    # M√©tricas generales
    st.subheader("üìà Resumen General")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total Ejercicios", "3")
    with col2:
        st.metric("Promedio Dificultad", "Intermedio")
    with col3:
        st.metric("Tiempo Promedio", "25 min")
    with col4:
        st.metric("M√°s Usado", "Sistemas Continuos")
    
    # Gr√°ficos de distribuci√≥n
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìö Distribuci√≥n por Unidad")
        # Datos de ejemplo
        unidades_data = pd.DataFrame({
            'Unidad': ['Sistemas Continuos', 'DFT', 'Transformada Z'],
            'Cantidad': [1, 1, 1]
        })
        st.bar_chart(unidades_data.set_index('Unidad'))
        
    with col2:
        st.subheader("üéØ Distribuci√≥n por Dificultad")
        dificultad_data = pd.DataFrame({
            'Dificultad': ['B√°sico', 'Intermedio', 'Avanzado'],
            'Cantidad': [1, 1, 1]
        })
        st.bar_chart(dificultad_data.set_index('Dificultad'))
    
    # Tabla de ejercicios m√°s utilizados
    st.subheader("üî• Ejercicios M√°s Utilizados")
    sample_data = load_sample_data()
    df = pd.DataFrame(sample_data)
    st.dataframe(
        df[['titulo', 'unidad_tematica', 'nivel_dificultad', 'modalidad']],
        use_container_width=True
    )

def show_settings():
    """P√°gina de configuraci√≥n"""
    st.markdown('<h1 class="main-header">‚öôÔ∏è Configuraci√≥n</h1>', 
                unsafe_allow_html=True)
    
    # Configuraci√≥n general
    st.subheader("üîß Configuraci√≥n General")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.text_input("Nombre del Profesor", value="Patricio de la Cuadra")
        st.text_input("Curso", value="IEE2103 - Se√±ales y Sistemas")
        st.text_input("Universidad", value="Pontificia Universidad Cat√≥lica de Chile")
        
    with col2:
        st.text_input("Semestre Actual", value="2024-2")
        st.text_input("Email", value="pcuadra@uc.cl")
        st.selectbox("Idioma", ["Espa√±ol", "English"])
    
    # Configuraci√≥n de exportaci√≥n
    st.subheader("üìÑ Configuraci√≥n de Exportaci√≥n")
    
    st.text_input("Template LaTeX", value="template_prueba.tex")
    st.checkbox("Incluir logo UC", value=True)
    st.checkbox("Numerar ejercicios autom√°ticamente", value=True)
    st.checkbox("Incluir fecha en documentos", value=True)
    
    # Configuraci√≥n de base de datos
    st.subheader("üíæ Base de Datos")
    
    st.text_input("Ruta de Base de Datos", value="database/ejercicios.db")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üîÑ Crear Backup"):
            st.success("Backup creado exitosamente")
    with col2:
        if st.button("üì• Importar Datos"):
            st.info("Funci√≥n de importaci√≥n en desarrollo")
    with col3:
        if st.button("üì§ Exportar Datos"):
            st.info("Funci√≥n de exportaci√≥n en desarrollo")

# Funci√≥n principal
def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    
    # Inicializar la base de datos
    db = init_database()
    
    # Configurar sidebar
    selected_page = setup_sidebar()
    
    # Mostrar informaci√≥n del sistema en sidebar
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üìä Estado del Sistema")
    st.sidebar.info("‚úÖ Base de datos conectada")
    st.sidebar.info("üìö 3 ejercicios disponibles")
    
    # Navegaci√≥n entre p√°ginas
    if selected_page == "üè† Dashboard":
        show_dashboard()
    elif selected_page == "‚ûï Agregar Ejercicio":
        show_add_exercise()
    elif selected_page == "üîç Buscar Ejercicios":
        show_search_exercises()
    elif selected_page == "üéØ Generar Prueba":
        show_generate_test()
    elif selected_page == "üìä Estad√≠sticas":
        show_statistics()
    elif selected_page == "‚öôÔ∏è Configuraci√≥n":
        show_settings()
    
    # Footer
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Sistema de Gesti√≥n de Ejercicios**")
    st.sidebar.markdown("*Se√±ales y Sistemas - PUC*")
    st.sidebar.markdown("v1.0.0 - Prototipo")

# Ejecutar la aplicaci√≥n
if __name__ == "__main__":
    main()