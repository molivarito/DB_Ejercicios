#!/usr/bin/env python3
"""
Test de Integraci√≥n para el Sistema de Importaci√≥n LaTeX
Sistema de Gesti√≥n de Ejercicios - Se√±ales y Sistemas
Patricio de la Cuadra - PUC Chile
"""

import sys
import os
import tempfile
import json
from datetime import datetime

# Agregar path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_latex_parser():
    """Test del parser LaTeX con diferentes formatos"""
    print("üß™ Testing LaTeX Parser...")
    
    try:
        from utils.latex_parser import LaTeXParser, ParseError
        
        parser = LaTeXParser()
        
        # Test Case 1: Ejercicio con environment
        test_content_1 = """
        \\begin{ejercicio}
        % Dificultad: Intermedio
        % Unidad: Sistemas Continuos
        % Tiempo: 25
        
        Calcule la convoluci√≥n y(t) = x(t) * h(t) donde:
        \\begin{enumerate}
        \\item x(t) = rect(t/2)
        \\item h(t) = Œ¥(t-1)  
        \\end{enumerate}
        
        \\begin{solucion}
        La convoluci√≥n resulta en y(t) = rect((t-1)/2)
        \\end{solucion}
        \\end{ejercicio}
        """
        
        exercises = parser.parse_file(test_content_1)
        assert len(exercises) >= 1, "Deber√≠a encontrar al menos 1 ejercicio"
        
        exercise = exercises[0]
        assert exercise.nivel_dificultad == "Intermedio", f"Dificultad incorrecta: {exercise.nivel_dificultad}"
        assert exercise.unidad_tematica == "Sistemas Continuos", f"Unidad incorrecta: {exercise.unidad_tematica}"
        assert exercise.tiempo_estimado == 25, f"Tiempo incorrecto: {exercise.tiempo_estimado}"
        assert exercise.solucion is not None, "Deber√≠a tener soluci√≥n"
        assert exercise.confidence_score > 0.8, f"Confianza muy baja: {exercise.confidence_score}"
        
        print("‚úÖ Test Case 1 (Environment): PASSED")
        
        # Test Case 2: Multiple exercises in enumerate
        test_content_2 = """
        \\section{Ejercicios de Fourier}
        
        \\begin{enumerate}
        \\item Determine la transformada de Fourier de x(t) = e^{-at}u(t)
        
        \\item Calcule la serie de Fourier de una se√±al cuadrada
        
        \\item % Dificultad: Avanzado
        Analice la convergencia de la serie de Fourier
        \\end{enumerate}
        """
        
        exercises = parser.parse_file(test_content_2)
        assert len(exercises) >= 2, f"Deber√≠a encontrar al menos 2 ejercicios, encontr√≥ {len(exercises)}"
        
        print("‚úÖ Test Case 2 (Enumerate): PASSED")
        
        # Test Case 3: Auto-detection of units
        test_content_3 = """
        \\begin{problem}
        Implemente en Python un algoritmo para calcular la FFT de una se√±al 
        discreta x[n] y grafique su espectro de frecuencias.
        \\end{problem}
        """
        
        exercises = parser.parse_file(test_content_3)
        assert len(exercises) >= 1, "Deber√≠a encontrar al menos 1 ejercicio"
        
        exercise = exercises[0]
        assert "Discreta" in exercise.unidad_tematica or "DFT" in exercise.unidad_tematica, f"Unidad auto-detectada incorrecta: {exercise.unidad_tematica}"
        assert exercise.modalidad == "Computacional" or "Computacional" in exercise.modalidad, f"Modalidad incorrecta: {exercise.modalidad}"
        
        print("‚úÖ Test Case 3 (Auto-detection): PASSED")
        
        print("üéâ LaTeX Parser: ALL TESTS PASSED")
        return True
        
    except ImportError as e:
        print(f"‚ùå Error importando LaTeX Parser: {e}")
        return False
    except AssertionError as e:
        print(f"‚ùå Test failed: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return False

def test_database_manager():
    """Test del gestor de base de datos"""
    print("\nüß™ Testing Database Manager...")
    
    try:
        from database.db_manager import DatabaseManager, DatabaseError
        from utils.latex_parser import ParsedExercise
        
        # Crear base de datos temporal
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_db:
            db_path = tmp_db.name
        
        db_manager = DatabaseManager(db_path)
        
        # Test Case 1: Crear ejercicio de prueba
        test_exercise = ParsedExercise(
            titulo="Test Exercise - Convoluci√≥n",
            enunciado="Calcule y(t) = x(t) * h(t) para las se√±ales dadas",
            solucion="La convoluci√≥n resulta en...",
            nivel_dificultad="Intermedio",
            unidad_tematica="Sistemas Continuos",
            tiempo_estimado=20,
            modalidad="Te√≥rico",
            subtemas=["convoluci√≥n", "se√±ales"],
            palabras_clave=["convolution", "signals"],
            pattern_used="test_pattern",
            confidence_score=0.9
        )
        
        # Test Case 2: Importaci√≥n individual
        result = db_manager.batch_import_exercises([test_exercise], "test_file.tex", "test_user")
        
        assert result['ejercicios_exitosos'] == 1, f"Deber√≠a haber importado 1 ejercicio exitosamente"
        assert result['ejercicios_fallidos'] == 0, f"No deber√≠a haber ejercicios fallidos"
        assert len(result['ids_insertados']) == 1, "Deber√≠a tener 1 ID insertado"
        
        print("‚úÖ Test Case 1 (Single Import): PASSED")
        
        # Test Case 3: Importaci√≥n m√∫ltiple
        test_exercises = []
        for i in range(5):
            exercise = ParsedExercise(
                titulo=f"Test Exercise {i+1}",
                enunciado=f"Enunciado del ejercicio {i+1}",
                nivel_dificultad=["B√°sico", "Intermedio", "Avanzado"][i % 3],
                unidad_tematica=["Sistemas Continuos", "Transformada de Fourier"][i % 2],
                confidence_score=0.8 - (i * 0.1)
            )
            test_exercises.append(exercise)
        
        result = db_manager.batch_import_exercises(test_exercises, "test_batch.tex", "test_user")
        
        assert result['ejercicios_exitosos'] == 5, f"Deber√≠a haber importado 5 ejercicios, import√≥ {result['ejercicios_exitosos']}"
        assert len(result['ids_insertados']) == 5, "Deber√≠a tener 5 IDs insertados"
        
        print("‚úÖ Test Case 2 (Batch Import): PASSED")
        
        # Test Case 4: Historial de importaciones
        import_history = db_manager.get_import_history(10)
        assert len(import_history) >= 2, f"Deber√≠a tener al menos 2 importaciones en el historial"
        
        print("‚úÖ Test Case 3 (Import History): PASSED")
        
        # Test Case 5: Ejercicios que necesitan revisi√≥n
        exercises_review = db_manager.get_exercises_needing_review()
        # Algunos ejercicios deber√≠an necesitar revisi√≥n por baja confianza
        
        print("‚úÖ Test Case 4 (Review Queue): PASSED")
        
        # Limpiar archivo temporal
        os.unlink(db_path)
        
        print("üéâ Database Manager: ALL TESTS PASSED")
        return True
        
    except ImportError as e:
        print(f"‚ùå Error importando Database Manager: {e}")
        return False
    except AssertionError as e:
        print(f"‚ùå Test failed: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return False

def test_integration_workflow():
    """Test del flujo completo de integraci√≥n"""
    print("\nüß™ Testing Integration Workflow...")
    
    try:
        from utils.latex_parser import LaTeXParser
        from database.db_manager import DatabaseManager
        
        # Crear base de datos temporal
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_db:
            db_path = tmp_db.name
        
        parser = LaTeXParser()
        db_manager = DatabaseManager(db_path)
        
        # Test Case: Flujo completo LaTeX ‚Üí Parser ‚Üí Database
        full_latex_content = """
        \\documentclass{article}
        \\begin{document}
        
        \\section{Ejercicios de Se√±ales y Sistemas}
        
        \\begin{ejercicio}
        % Dificultad: B√°sico
        % Unidad: Introducci√≥n
        % Tiempo: 15
        
        Defina qu√© es una se√±al continua y d√© tres ejemplos de la vida real.
        
        \\begin{solucion}
        Una se√±al continua es aquella definida para todos los valores del tiempo...
        Ejemplos: temperatura ambiente, presi√≥n atmosf√©rica, voltaje de una bater√≠a.
        \\end{solucion}
        \\end{ejercicio}
        
        \\begin{ejercicio}
        % Dificultad: Intermedio
        % Unidad: Sistemas Continuos
        % Tiempo: 30
        
        Para el sistema LTI con respuesta al impulso h(t) = e^{-2t}u(t):
        \\begin{enumerate}
        \\item Calcule la respuesta a x(t) = u(t)
        \\item Determine si el sistema es estable
        \\item Grafique h(t) y y(t)
        \\end{enumerate}
        
        \\begin{solucion}
        \\begin{enumerate}
        \\item y(t) = (1/2)(1-e^{-2t})u(t)
        \\item El sistema es estable porque ‚à´|h(t)|dt < ‚àû
        \\item [Gr√°ficos]
        \\end{enumerate}
        \\end{solucion}
        \\end{ejercicio}
        
        \\section{Problemas Avanzados}
        
        \\begin{problem}
        % Dificultad: Avanzado
        % Modalidad: Computacional
        Implemente en Python un filtro pasa-bajas usando la transformada de Fourier
        y analice su respuesta en frecuencia.
        \\end{problem}
        
        \\end{document}
        """
        
        # 1. Parser
        exercises = parser.parse_file(full_latex_content)
        assert len(exercises) >= 3, f"Deber√≠a encontrar al menos 3 ejercicios, encontr√≥ {len(exercises)}"
        
        # Verificar que se parsearon correctamente
        basic_exercise = next((ex for ex in exercises if ex.nivel_dificultad == "B√°sico"), None)
        assert basic_exercise is not None, "Deber√≠a encontrar ejercicio b√°sico"
        assert basic_exercise.tiempo_estimado == 15, f"Tiempo incorrecto: {basic_exercise.tiempo_estimado}"
        
        intermediate_exercise = next((ex for ex in exercises if ex.nivel_dificultad == "Intermedio"), None)
        assert intermediate_exercise is not None, "Deber√≠a encontrar ejercicio intermedio"
        assert intermediate_exercise.unidad_tematica == "Sistemas Continuos", f"Unidad incorrecta: {intermediate_exercise.unidad_tematica}"
        
        computational_exercise = next((ex for ex in exercises if ex.modalidad == "Computacional"), None)
        assert computational_exercise is not None, "Deber√≠a encontrar ejercicio computacional"
        
        print("‚úÖ Phase 1 (Parsing): PASSED")
        
        # 2. Database Import
        result = db_manager.batch_import_exercises(exercises, "integration_test.tex", "integration_test")
        
        assert result['ejercicios_exitosos'] == len(exercises), f"Todos los ejercicios deber√≠an haberse importado exitosamente"
        assert result['ejercicios_fallidos'] == 0, "No deber√≠a haber ejercicios fallidos"
        
        print("‚úÖ Phase 2 (Database Import): PASSED")
        
        # 3. Verificar datos en base de datos
        import_history = db_manager.get_import_history(1)
        latest_import = import_history[0]
        
        assert latest_import['archivo_origen'] == "integration_test.tex", "Nombre de archivo incorrecto"
        assert latest_import['ejercicios_exitosos'] == len(exercises), "Cantidad importada incorrecta"
        
        print("‚úÖ Phase 3 (Database Verification): PASSED")
        
        # 4. Test de b√∫squeda y filtrado (simulado)
        # En un sistema real, aqu√≠ probar√≠amos las funciones de b√∫squeda
        exercises_review = db_manager.get_exercises_needing_review()
        print(f"üìã Ejercicios que necesitan revisi√≥n: {len(exercises_review)}")
        
        print("‚úÖ Phase 4 (Search & Filter): PASSED")
        
        # Limpiar
        os.unlink(db_path)
        
        print("üéâ Integration Workflow: ALL TESTS PASSED")
        return True
        
    except Exception as e:
        print(f"‚ùå Integration test failed: {e}")
        return False

def test_error_handling():
    """Test del manejo de errores"""
    print("\nüß™ Testing Error Handling...")
    
    try:
        from utils.latex_parser import LaTeXParser, ParseError
        from database.db_manager import DatabaseManager, DatabaseError
        
        parser = LaTeXParser()
        
        # Test Case 1: Contenido LaTeX malformado
        malformed_content = """
        \\begin{ejercicio}
        Este ejercicio no tiene cierre
        % Sin \\end{ejercicio}
        """
        
        try:
            exercises = parser.parse_file(malformed_content)
            # Deber√≠a manejar gracefulmente el contenido malformado
            print("‚úÖ Test Case 1 (Malformed Content): PASSED")
        except Exception as e:
            print(f"‚ö†Ô∏è Test Case 1: Parser manej√≥ error correctamente: {type(e).__name__}")
        
        # Test Case 2: Contenido vac√≠o
        empty_content = ""
        exercises = parser.parse_file(empty_content)
        assert exercises == [], "Contenido vac√≠o deber√≠a retornar lista vac√≠a"
        print("‚úÖ Test Case 2 (Empty Content): PASSED")
        
        # Test Case 3: Ejercicio sin metadatos obligatorios
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp_db:
            db_path = tmp_db.name
        
        db_manager = DatabaseManager(db_path)
        
        # Ejercicio con datos incompletos
        invalid_exercise = {
            'titulo': '',  # T√≠tulo vac√≠o (inv√°lido)
            'enunciado': '',  # Enunciado vac√≠o (inv√°lido)
            'nivel_dificultad': 'InvalidLevel'  # Nivel inv√°lido
        }
        
        try:
            result = db_manager.batch_import_exercises([invalid_exercise], "test_error.tex")
            assert result['ejercicios_fallidos'] >= 1, "Deber√≠a fallar con datos inv√°lidos"
            print("‚úÖ Test Case 3 (Invalid Data): PASSED")
        except Exception:
            print("‚úÖ Test Case 3 (Invalid Data): PASSED - Exception handled")
        
        os.unlink(db_path)
        
        print("üéâ Error Handling: ALL TESTS PASSED")
        return True
        
    except Exception as e:
        print(f"‚ùå Error handling test failed: {e}")
        return False

def test_performance():
    """Test de rendimiento con archivos grandes"""
    print("\nüß™ Testing Performance...")
    
    try:
        from utils.latex_parser import LaTeXParser
        import time
        
        parser = LaTeXParser()
        
        # Generar contenido LaTeX grande
        large_content = "\\documentclass{article}\n\\begin{document}\n\n"
        
        # 100 ejercicios simulados
        for i in range(100):
            large_content += f"""
\\begin{{ejercicio}}
% Dificultad: {"B√°sico" if i % 3 == 0 else "Intermedio" if i % 3 == 1 else "Avanzado"}
% Unidad: {"Sistemas Continuos" if i % 2 == 0 else "Transformada de Fourier"}
% Tiempo: {15 + (i % 30)}

Ejercicio n√∫mero {i+1}: Calcule la transformada de la se√±al x_{i+1}(t) = sin(2œÄf_{i+1}t)
donde f_{i+1} = {i+1} Hz.

\\begin{{enumerate}}
\\item Determine la transformada de Fourier
\\item Grafique el espectro de magnitud  
\\item Analice el ancho de banda
\\end{{enumerate}}

\\begin{{solucion}}
La transformada de Fourier de x_{i+1}(t) es X_{i+1}(f) = œÄ[Œ¥(f-{i+1}) - Œ¥(f+{i+1})]
El espectro muestra impulsos en ¬±{i+1} Hz.
El ancho de banda es te√≥ricamente cero para una sinusoide pura.
\\end{{solucion}}
\\end{{ejercicio}}

"""
        
        large_content += "\\end{document}"
        
        # Medir tiempo de parsing
        start_time = time.time()
        exercises = parser.parse_file(large_content)
        end_time = time.time()
        
        parsing_time = end_time - start_time
        exercises_per_second = len(exercises) / parsing_time if parsing_time > 0 else float('inf')
        
        print(f"üìä Performance Results:")
        print(f"   - Ejercicios parseados: {len(exercises)}")
        print(f"   - Tiempo de parsing: {parsing_time:.2f} segundos")
        print(f"   - Velocidad: {exercises_per_second:.1f} ejercicios/segundo")
        
        # Verificaciones de performance
        assert len(exercises) >= 80, f"Deber√≠a parsear al menos 80 de 100 ejercicios, parse√≥ {len(exercises)}"
        assert parsing_time < 30, f"Parsing deber√≠a tomar menos de 30 segundos, tom√≥ {parsing_time:.2f}"
        
        print("‚úÖ Performance test: PASSED")
        return True
        
    except Exception as e:
        print(f"‚ùå Performance test failed: {e}")
        return False

def generate_test_report():
    """Genera un reporte completo de los tests"""
    print("\n" + "="*60)
    print("üìã REPORTE COMPLETO DE TESTING")
    print("="*60)
    
    test_results = {}
    
    # Ejecutar todos los tests
    test_results['latex_parser'] = test_latex_parser()
    test_results['database_manager'] = test_database_manager()
    test_results['integration_workflow'] = test_integration_workflow()
    test_results['error_handling'] = test_error_handling()
    test_results['performance'] = test_performance()
    
    # Generar resumen
    passed_tests = sum(test_results.values())
    total_tests = len(test_results)
    
    print(f"\nüìä RESUMEN FINAL:")
    print(f"   ‚úÖ Tests pasados: {passed_tests}/{total_tests}")
    print(f"   üìà Tasa de √©xito: {(passed_tests/total_tests)*100:.1f}%")
    
    if passed_tests == total_tests:
        print("\nüéâ ¬°TODOS LOS TESTS PASARON!")
        print("‚úÖ El sistema de importaci√≥n LaTeX est√° listo para producci√≥n")
    else:
        print(f"\n‚ö†Ô∏è {total_tests - passed_tests} tests fallaron")
        print("üîß Revisar los componentes que fallaron antes de usar en producci√≥n")
    
    # Generar reporte JSON
    report = {
        'timestamp': datetime.now().isoformat(),
        'test_results': test_results,
        'summary': {
            'passed': passed_tests,
            'total': total_tests,
            'success_rate': (passed_tests/total_tests)*100
        }
    }
    
    try:
        with open('test_report.json', 'w') as f:
            json.dump(report, f, indent=2)
        print(f"\nüìÑ Reporte guardado en: test_report.json")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo guardar el reporte: {e}")
    
    return passed_tests == total_tests

def create_sample_latex_files():
    """Crea archivos LaTeX de ejemplo para testing manual"""
    print("\nüìÅ Creando archivos de ejemplo para testing manual...")
    
    # Crear directorio de ejemplos
    examples_dir = "examples_latex"
    os.makedirs(examples_dir, exist_ok=True)
    
    # Ejemplo 1: Ejercicios b√°sicos
    example1_content = """\\documentclass{article}
\\usepackage[utf8]{inputenc}
\\usepackage[spanish]{babel}

\\begin{document}

\\section{Ejercicios B√°sicos - Se√±ales y Sistemas}

\\begin{ejercicio}
% Dificultad: B√°sico
% Unidad: Introducci√≥n
% Tiempo: 10
% Tipo: Definici√≥n

Defina los siguientes conceptos:
\\begin{enumerate}
\\item Se√±al continua
\\item Sistema LTI
\\item Respuesta al impulso
\\end{enumerate}

\\begin{solucion}
\\begin{enumerate}
\\item Una se√±al continua est√° definida para todos los valores del tiempo real
\\item Un sistema LTI es lineal e invariante en el tiempo
\\item La respuesta al impulso caracteriza completamente un sistema LTI
\\end{enumerate}
\\end{solucion}
\\end{ejercicio}

\\begin{ejercicio}
% Dificultad: Intermedio
% Unidad: Sistemas Continuos
% Tiempo: 20

Calcule la convoluci√≥n y(t) = x(t) * h(t) donde:
\\begin{itemize}
\\item x(t) = u(t) - u(t-2)
\\item h(t) = e^{-t}u(t)
\\end{itemize}

\\begin{solucion}
y(t) = (1-e^{-t})u(t) - (1-e^{-(t-2)})u(t-2)
\\end{solucion}
\\end{ejercicio}

\\end{document}"""
    
    with open(f"{examples_dir}/ejercicios_basicos.tex", "w", encoding="utf-8") as f:
        f.write(example1_content)
    
    # Ejemplo 2: Ejercicios avanzados
    example2_content = """\\documentclass{article}
\\usepackage{amsmath}
\\usepackage{graphicx}

\\begin{document}

\\section{Problemas Avanzados}

\\begin{problem}
% Dificultad: Avanzado
% Unidad: Transformada de Fourier
% Modalidad: Computacional
% Tiempo: 45

Dise√±e un filtro digital que cumpla las siguientes especificaciones:
\\begin{itemize}
\\item Frecuencia de corte: 1 kHz
\\item Atenuaci√≥n en banda de rechazo: > 40 dB
\\item Ondulaci√≥n en banda de paso: < 0.5 dB
\\end{itemize}

Implemente el filtro en Python y verifique su respuesta.
\\end{problem}

\\subsection{Ejercicios de Transformada Z}

\\begin{enumerate}
\\item % Dificultad: Intermedio
Determine la transformada Z de x[n] = a^n u[n] y su regi√≥n de convergencia.

\\item % Dificultad: Avanzado
Analice la estabilidad del sistema con funci√≥n de transferencia:
$H(z) = \\frac{1 + z^{-1}}{1 - 0.8z^{-1} + 0.15z^{-2}}$

\\item % Dificultad: Desaf√≠o
Dise√±e un sistema que tenga respuesta finita al impulso y fase lineal.
\\end{enumerate}

\\end{document}"""
    
    with open(f"{examples_dir}/ejercicios_avanzados.tex", "w", encoding="utf-8") as f:
        f.write(example2_content)
    
    # Ejemplo 3: Formato mixto
    example3_content = """\\documentclass{article}

\\begin{document}

% Este archivo tiene formatos mixtos para probar la robustez del parser

\\section{Sistemas Discretos}

\\ejercicio{1}{
% Dificultad: B√°sico
% Unidad: Sistemas Discretos
Explique el teorema de muestreo de Nyquist.
}

\\begin{ejercicio}
% Dificultad: Intermedio
% Tiempo: 30
Una se√±al x(t) = cos(2œÄ¬∑50t) se muestrea a fs = 100 Hz.
¬øQu√© frecuencia aparece en la se√±al muestreada?

\\ifanswers
La frecuencia de muestreo es exactamente el doble de la frecuencia de la se√±al,
por lo que no hay aliasing. La se√±al muestreada tendr√° la misma frecuencia: 50 Hz.
\\fi
\\end{ejercicio}

% Ejercicio sin environment espec√≠fico
**Problema 3:** % Dificultad: Avanzado
Implemente la FFT radix-2 y compare su eficiencia con la DFT directa
para se√±ales de longitud N = 1024.

\\end{document}"""
    
    with open(f"{examples_dir}/formato_mixto.tex", "w", encoding="utf-8") as f:
        f.write(example3_content)
    
    print(f"‚úÖ Archivos de ejemplo creados en: {examples_dir}/")
    print("   - ejercicios_basicos.tex")
    print("   - ejercicios_avanzados.tex") 
    print("   - formato_mixto.tex")
    
    return examples_dir

if __name__ == "__main__":
    print("üöÄ SISTEMA DE TESTING - IMPORTADOR LATEX")
    print("Sistema de Gesti√≥n de Ejercicios - Se√±ales y Sistemas")
    print("=" * 60)
    
    # Crear archivos de ejemplo
    create_sample_latex_files()
    
    # Ejecutar tests completos
    all_passed = generate_test_report()
    
    print("\n" + "="*60)
    
    if all_passed:
        print("üéâ SISTEMA LISTO PARA PRODUCCI√ìN")
        print("\nüìã Pr√≥ximos pasos:")
        print("1. Integrar los m√≥dulos en app.py")
        print("2. Descommentar las importaciones reales")
        print("3. Poblar la base de datos con ejercicios reales")
        print("4. Configurar logging para producci√≥n")
    else:
        print("üîß REVISAR COMPONENTES ANTES DE USAR")
        print("\nüõ†Ô∏è Acciones recomendadas:")
        print("1. Revisar los errores reportados")
        print("2. Instalar dependencias faltantes")
        print("3. Verificar estructura de directorios")
        print("4. Re-ejecutar tests espec√≠ficos")
    
    print(f"\nüìä Reporte completo disponible en: test_report.json")
    
    exit(0 if all_passed else 1)